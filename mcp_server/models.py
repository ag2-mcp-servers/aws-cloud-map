# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-28T13:46:49+00:00

from __future__ import annotations

from datetime import datetime
from enum import Enum
from typing import Any, Dict, List, Optional

from pydantic import BaseModel, ConfigDict, Field, RootModel, conint, constr


class AmazonResourceName(RootModel[constr(min_length=1, max_length=1011)]):
    root: constr(min_length=1, max_length=1011)


class Arn(RootModel[constr(max_length=255)]):
    root: constr(max_length=255)


class AttrKey(RootModel[constr(pattern=r'^[a-zA-Z0-9!-~]+$', max_length=255)]):
    root: constr(pattern=r'^[a-zA-Z0-9!-~]+$', max_length=255)


class AttrValue(
    RootModel[
        constr(
            pattern=r'^([a-zA-Z0-9!-~][ \ta-zA-Z0-9!-~]*){0,1}[a-zA-Z0-9!-~]{0,1}$',
            max_length=1024,
        )
    ]
):
    root: constr(
        pattern=r'^([a-zA-Z0-9!-~][ \ta-zA-Z0-9!-~]*){0,1}[a-zA-Z0-9!-~]{0,1}$',
        max_length=1024,
    )


class Attributes(RootModel[Optional[Dict[str, AttrValue]]]):
    root: Optional[Dict[str, AttrValue]] = None


class Code(RootModel[str]):
    root: str


class CustomHealthNotFound(RootModel[Any]):
    root: Any


class CustomHealthStatus(Enum):
    HEALTHY = 'HEALTHY'
    UNHEALTHY = 'UNHEALTHY'


class DeleteServiceResponse(BaseModel):
    pass


class DiscoverMaxResults(RootModel[conint(ge=1, le=1000)]):
    root: conint(ge=1, le=1000)


class DuplicateRequest(RootModel[Any]):
    root: Any


class FailureThreshold(RootModel[conint(ge=1, le=10)]):
    root: conint(ge=1, le=10)


class FilterCondition(Enum):
    EQ = 'EQ'
    IN = 'IN'
    BETWEEN = 'BETWEEN'
    BEGINS_WITH = 'BEGINS_WITH'


class FilterValue(RootModel[constr(min_length=1, max_length=255)]):
    root: constr(min_length=1, max_length=255)


class FilterValues(RootModel[List[FilterValue]]):
    root: List[FilterValue]


class HealthCheckCustomConfig(BaseModel):
    FailureThreshold_1: Optional[FailureThreshold] = Field(
        None, alias='FailureThreshold'
    )


class HealthCheckType(Enum):
    HTTP = 'HTTP'
    HTTPS = 'HTTPS'
    TCP = 'TCP'


class HealthStatus(Enum):
    HEALTHY = 'HEALTHY'
    UNHEALTHY = 'UNHEALTHY'
    UNKNOWN = 'UNKNOWN'


class HealthStatusFilter(Enum):
    HEALTHY = 'HEALTHY'
    UNHEALTHY = 'UNHEALTHY'
    ALL = 'ALL'
    HEALTHY_OR_ELSE_ALL = 'HEALTHY_OR_ELSE_ALL'


class InstanceHealthStatusMap(RootModel[Optional[Dict[str, HealthStatus]]]):
    root: Optional[Dict[str, HealthStatus]] = None


class InstanceId(RootModel[constr(pattern=r'^[0-9a-zA-Z_/:.@-]+$', max_length=64)]):
    root: constr(pattern=r'^[0-9a-zA-Z_/:.@-]+$', max_length=64)


class InstanceNotFound(RootModel[Any]):
    root: Any


class InvalidInput(RootModel[Any]):
    root: Any


class ListTagsForResourceRequest(BaseModel):
    ResourceARN: AmazonResourceName


class MaxResults(RootModel[conint(ge=1, le=100)]):
    root: conint(ge=1, le=100)


class Message(RootModel[str]):
    root: str


class NamespaceAlreadyExists(RootModel[Any]):
    root: Any


class NamespaceFilterName(Enum):
    TYPE = 'TYPE'
    NAME = 'NAME'
    HTTP_NAME = 'HTTP_NAME'


class NamespaceName(RootModel[constr(max_length=1024)]):
    root: constr(max_length=1024)


class NamespaceNameHttp(RootModel[constr(pattern=r'^[!-~]{1,1024}$', max_length=1024)]):
    root: constr(pattern=r'^[!-~]{1,1024}$', max_length=1024)


class NamespaceNamePrivate(
    RootModel[constr(pattern=r'^[!-~]{1,253}$', max_length=253)]
):
    root: constr(pattern=r'^[!-~]{1,253}$', max_length=253)


class NamespaceNamePublic(
    RootModel[
        constr(
            pattern=r'^([a-zA-Z0-9]([a-zA-Z0-9\-]{0,61}[a-zA-Z0-9])?\.)+[a-zA-Z0-9]([a-zA-Z0-9\-]{0,61}[a-zA-Z0-9])?$',
            max_length=253,
        )
    ]
):
    root: constr(
        pattern=r'^([a-zA-Z0-9]([a-zA-Z0-9\-]{0,61}[a-zA-Z0-9])?\.)+[a-zA-Z0-9]([a-zA-Z0-9\-]{0,61}[a-zA-Z0-9])?$',
        max_length=253,
    )


class NamespaceNotFound(RootModel[Any]):
    root: Any


class NamespaceType(Enum):
    DNS_PUBLIC = 'DNS_PUBLIC'
    DNS_PRIVATE = 'DNS_PRIVATE'
    HTTP = 'HTTP'


class NextToken(RootModel[constr(max_length=4096)]):
    root: constr(max_length=4096)


class OperationFilterName(Enum):
    NAMESPACE_ID = 'NAMESPACE_ID'
    SERVICE_ID = 'SERVICE_ID'
    STATUS = 'STATUS'
    TYPE = 'TYPE'
    UPDATE_DATE = 'UPDATE_DATE'


class OperationId(RootModel[constr(max_length=255)]):
    root: constr(max_length=255)


class OperationNotFound(RootModel[Any]):
    root: Any


class OperationStatus(Enum):
    SUBMITTED = 'SUBMITTED'
    PENDING = 'PENDING'
    SUCCESS = 'SUCCESS'
    FAIL = 'FAIL'


class OperationSummary(BaseModel):
    Id: Optional[OperationId] = None
    Status: Optional[OperationStatus] = None


class OperationSummaryList(RootModel[List[OperationSummary]]):
    root: List[OperationSummary]


class OperationTargetType(Enum):
    NAMESPACE = 'NAMESPACE'
    SERVICE = 'SERVICE'
    INSTANCE = 'INSTANCE'


class OperationType(Enum):
    CREATE_NAMESPACE = 'CREATE_NAMESPACE'
    DELETE_NAMESPACE = 'DELETE_NAMESPACE'
    UPDATE_NAMESPACE = 'UPDATE_NAMESPACE'
    UPDATE_SERVICE = 'UPDATE_SERVICE'
    REGISTER_INSTANCE = 'REGISTER_INSTANCE'
    DEREGISTER_INSTANCE = 'DEREGISTER_INSTANCE'


class RecordTTL(RootModel[conint(ge=0, le=2147483647)]):
    root: conint(ge=0, le=2147483647)


class RecordType(Enum):
    SRV = 'SRV'
    A = 'A'
    AAAA = 'AAAA'
    CNAME = 'CNAME'


class RegisterInstanceResponse(BaseModel):
    OperationId_1: Optional[OperationId] = Field(None, alias='OperationId')


class RequestLimitExceeded(RootModel[Any]):
    root: Any


class ResourceCount(RootModel[int]):
    root: int


class ResourceDescription(RootModel[constr(max_length=1024)]):
    root: constr(max_length=1024)


class ResourceId(RootModel[constr(max_length=64)]):
    root: constr(max_length=64)


class ResourceInUse(RootModel[Any]):
    root: Any


class ResourceLimitExceeded(RootModel[Any]):
    root: Any


class ResourceNotFoundException(RootModel[Any]):
    root: Any


class ResourcePath(RootModel[constr(max_length=255)]):
    root: constr(max_length=255)


class RoutingPolicy(Enum):
    MULTIVALUE = 'MULTIVALUE'
    WEIGHTED = 'WEIGHTED'


class SOA(BaseModel):
    TTL: RecordTTL


class SOAChange(BaseModel):
    TTL: RecordTTL


class ServiceAlreadyExists(RootModel[Any]):
    root: Any


class ServiceFilterName(Enum):
    NAMESPACE_ID = 'NAMESPACE_ID'


class ServiceName(
    RootModel[
        constr(
            pattern=r'((?=^.{1,127}$)^([a-zA-Z0-9_][a-zA-Z0-9-_]{0,61}[a-zA-Z0-9_]|[a-zA-Z0-9])(\.([a-zA-Z0-9_][a-zA-Z0-9-_]{0,61}[a-zA-Z0-9_]|[a-zA-Z0-9]))*$)|(^\.$)'
        )
    ]
):
    model_config = ConfigDict(
        regex_engine="python-re",
    )
    root: constr(
        pattern=r'((?=^.{1,127}$)^([a-zA-Z0-9_][a-zA-Z0-9-_]{0,61}[a-zA-Z0-9_]|[a-zA-Z0-9])(\.([a-zA-Z0-9_][a-zA-Z0-9-_]{0,61}[a-zA-Z0-9_]|[a-zA-Z0-9]))*$)|(^\.$)'
    )


class ServiceNotFound(RootModel[Any]):
    root: Any


class ServiceType(Enum):
    HTTP = 'HTTP'
    DNS_HTTP = 'DNS_HTTP'
    DNS = 'DNS'


class ServiceTypeOption(Enum):
    HTTP = 'HTTP'


class TagKey(RootModel[constr(min_length=1, max_length=128)]):
    root: constr(min_length=1, max_length=128)


class TagKeyList(RootModel[List[TagKey]]):
    root: List[TagKey] = Field(..., max_length=200, min_length=0)


class TagResourceResponse(BaseModel):
    pass


class TagValue(RootModel[constr(min_length=0, max_length=256)]):
    root: constr(min_length=0, max_length=256)


class Timestamp(RootModel[datetime]):
    root: datetime


class TooManyTagsException(RootModel[Any]):
    root: Any


class UntagResourceRequest(BaseModel):
    ResourceARN: AmazonResourceName
    TagKeys: TagKeyList


class UntagResourceResponse(BaseModel):
    pass


class UpdateHttpNamespaceResponse(BaseModel):
    OperationId_1: Optional[OperationId] = Field(None, alias='OperationId')


class UpdateInstanceCustomHealthStatusRequest(BaseModel):
    InstanceId: ResourceId
    ServiceId: ResourceId
    Status: CustomHealthStatus


class UpdatePrivateDnsNamespaceResponse(BaseModel):
    OperationId_1: Optional[OperationId] = Field(None, alias='OperationId')


class UpdatePublicDnsNamespaceResponse(BaseModel):
    OperationId_1: Optional[OperationId] = Field(None, alias='OperationId')


class UpdateServiceResponse(BaseModel):
    OperationId_1: Optional[OperationId] = Field(None, alias='OperationId')


class XAmzTarget(Enum):
    Route53AutoNaming_v20170314_CreateHttpNamespace = (
        'Route53AutoNaming_v20170314.CreateHttpNamespace'
    )


class XAmzTarget1(Enum):
    Route53AutoNaming_v20170314_CreatePrivateDnsNamespace = (
        'Route53AutoNaming_v20170314.CreatePrivateDnsNamespace'
    )


class XAmzTarget2(Enum):
    Route53AutoNaming_v20170314_CreatePublicDnsNamespace = (
        'Route53AutoNaming_v20170314.CreatePublicDnsNamespace'
    )


class XAmzTarget3(Enum):
    Route53AutoNaming_v20170314_CreateService = (
        'Route53AutoNaming_v20170314.CreateService'
    )


class XAmzTarget4(Enum):
    Route53AutoNaming_v20170314_DeleteNamespace = (
        'Route53AutoNaming_v20170314.DeleteNamespace'
    )


class XAmzTarget5(Enum):
    Route53AutoNaming_v20170314_DeleteService = (
        'Route53AutoNaming_v20170314.DeleteService'
    )


class XAmzTarget6(Enum):
    Route53AutoNaming_v20170314_DeregisterInstance = (
        'Route53AutoNaming_v20170314.DeregisterInstance'
    )


class XAmzTarget7(Enum):
    Route53AutoNaming_v20170314_DiscoverInstances = (
        'Route53AutoNaming_v20170314.DiscoverInstances'
    )


class XAmzTarget8(Enum):
    Route53AutoNaming_v20170314_GetInstance = 'Route53AutoNaming_v20170314.GetInstance'


class XAmzTarget9(Enum):
    Route53AutoNaming_v20170314_GetInstancesHealthStatus = (
        'Route53AutoNaming_v20170314.GetInstancesHealthStatus'
    )


class XAmzTarget10(Enum):
    Route53AutoNaming_v20170314_GetNamespace = (
        'Route53AutoNaming_v20170314.GetNamespace'
    )


class XAmzTarget11(Enum):
    Route53AutoNaming_v20170314_GetOperation = (
        'Route53AutoNaming_v20170314.GetOperation'
    )


class XAmzTarget12(Enum):
    Route53AutoNaming_v20170314_GetService = 'Route53AutoNaming_v20170314.GetService'


class XAmzTarget13(Enum):
    Route53AutoNaming_v20170314_ListInstances = (
        'Route53AutoNaming_v20170314.ListInstances'
    )


class XAmzTarget14(Enum):
    Route53AutoNaming_v20170314_ListNamespaces = (
        'Route53AutoNaming_v20170314.ListNamespaces'
    )


class XAmzTarget15(Enum):
    Route53AutoNaming_v20170314_ListOperations = (
        'Route53AutoNaming_v20170314.ListOperations'
    )


class XAmzTarget16(Enum):
    Route53AutoNaming_v20170314_ListServices = (
        'Route53AutoNaming_v20170314.ListServices'
    )


class XAmzTarget17(Enum):
    Route53AutoNaming_v20170314_ListTagsForResource = (
        'Route53AutoNaming_v20170314.ListTagsForResource'
    )


class XAmzTarget18(Enum):
    Route53AutoNaming_v20170314_RegisterInstance = (
        'Route53AutoNaming_v20170314.RegisterInstance'
    )


class XAmzTarget19(Enum):
    Route53AutoNaming_v20170314_TagResource = 'Route53AutoNaming_v20170314.TagResource'


class XAmzTarget20(Enum):
    Route53AutoNaming_v20170314_UntagResource = (
        'Route53AutoNaming_v20170314.UntagResource'
    )


class XAmzTarget21(Enum):
    Route53AutoNaming_v20170314_UpdateHttpNamespace = (
        'Route53AutoNaming_v20170314.UpdateHttpNamespace'
    )


class XAmzTarget22(Enum):
    Route53AutoNaming_v20170314_UpdateInstanceCustomHealthStatus = (
        'Route53AutoNaming_v20170314.UpdateInstanceCustomHealthStatus'
    )


class XAmzTarget23(Enum):
    Route53AutoNaming_v20170314_UpdatePrivateDnsNamespace = (
        'Route53AutoNaming_v20170314.UpdatePrivateDnsNamespace'
    )


class XAmzTarget24(Enum):
    Route53AutoNaming_v20170314_UpdatePublicDnsNamespace = (
        'Route53AutoNaming_v20170314.UpdatePublicDnsNamespace'
    )


class XAmzTarget25(Enum):
    Route53AutoNaming_v20170314_UpdateService = (
        'Route53AutoNaming_v20170314.UpdateService'
    )


class CreateHttpNamespaceResponse(BaseModel):
    OperationId_1: Optional[OperationId] = Field(None, alias='OperationId')


class CreatePrivateDnsNamespaceResponse(BaseModel):
    OperationId_1: Optional[OperationId] = Field(None, alias='OperationId')


class CreatePublicDnsNamespaceResponse(BaseModel):
    OperationId_1: Optional[OperationId] = Field(None, alias='OperationId')


class DeleteNamespaceRequest(BaseModel):
    Id: ResourceId


class DeleteNamespaceResponse(BaseModel):
    OperationId_1: Optional[OperationId] = Field(None, alias='OperationId')


class DeleteServiceRequest(BaseModel):
    Id: ResourceId


class DeregisterInstanceRequest(BaseModel):
    InstanceId: ResourceId
    ServiceId: ResourceId


class DeregisterInstanceResponse(BaseModel):
    OperationId_1: Optional[OperationId] = Field(None, alias='OperationId')


class DiscoverInstancesRequest(BaseModel):
    HealthStatus: Optional[HealthStatusFilter] = None
    MaxResults: Optional[DiscoverMaxResults] = None
    NamespaceName_1: NamespaceName = Field(..., alias='NamespaceName')
    OptionalParameters: Optional[Attributes] = None
    QueryParameters: Optional[Attributes] = None
    ServiceName_1: ServiceName = Field(..., alias='ServiceName')


class DnsProperties(BaseModel):
    HostedZoneId: Optional[ResourceId] = None
    SOA_1: Optional[SOA] = Field(None, alias='SOA')


class DnsRecord(BaseModel):
    TTL: RecordTTL
    Type: RecordType


class DnsRecordList(RootModel[List[DnsRecord]]):
    root: List[DnsRecord]


class GetInstanceRequest(BaseModel):
    InstanceId: ResourceId
    ServiceId: ResourceId


class GetInstancesHealthStatusResponse(BaseModel):
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')
    Status: Optional[InstanceHealthStatusMap] = None


class GetNamespaceRequest(BaseModel):
    Id: ResourceId


class GetOperationRequest(BaseModel):
    OperationId: ResourceId


class GetServiceRequest(BaseModel):
    Id: ResourceId


class HealthCheckConfig(BaseModel):
    FailureThreshold_1: Optional[FailureThreshold] = Field(
        None, alias='FailureThreshold'
    )
    ResourcePath_1: Optional[ResourcePath] = Field(None, alias='ResourcePath')
    Type: HealthCheckType


class HttpInstanceSummary(BaseModel):
    Attributes_1: Optional[Attributes] = Field(None, alias='Attributes')
    HealthStatus_1: Optional[HealthStatus] = Field(None, alias='HealthStatus')
    InstanceId: Optional[ResourceId] = None
    NamespaceName: Optional[NamespaceNameHttp] = None
    ServiceName_1: Optional[ServiceName] = Field(None, alias='ServiceName')


class HttpInstanceSummaryList(RootModel[List[HttpInstanceSummary]]):
    root: List[HttpInstanceSummary]


class HttpNamespaceChange(BaseModel):
    Description: ResourceDescription


class HttpProperties(BaseModel):
    HttpName: Optional[NamespaceName] = None


class Instance(BaseModel):
    Attributes_1: Optional[Attributes] = Field(None, alias='Attributes')
    CreatorRequestId: Optional[ResourceId] = None
    Id: ResourceId


class InstanceIdList(RootModel[List[ResourceId]]):
    root: List[ResourceId] = Field(..., min_length=1)


class InstanceSummary(BaseModel):
    Attributes_1: Optional[Attributes] = Field(None, alias='Attributes')
    Id: Optional[ResourceId] = None


class InstanceSummaryList(RootModel[List[InstanceSummary]]):
    root: List[InstanceSummary]


class ListInstancesRequest(BaseModel):
    MaxResults_1: Optional[MaxResults] = Field(None, alias='MaxResults')
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')
    ServiceId: ResourceId


class ListInstancesResponse(BaseModel):
    Instances: Optional[InstanceSummaryList] = None
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')


class ListOperationsResponse(BaseModel):
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')
    Operations: Optional[OperationSummaryList] = None


class NamespaceFilter(BaseModel):
    Condition: Optional[FilterCondition] = None
    Name: NamespaceFilterName
    Values: FilterValues


class NamespaceFilters(RootModel[List[NamespaceFilter]]):
    root: List[NamespaceFilter]


class NamespaceProperties(BaseModel):
    DnsProperties_1: Optional[DnsProperties] = Field(None, alias='DnsProperties')
    HttpProperties_1: Optional[HttpProperties] = Field(None, alias='HttpProperties')


class NamespaceSummary(BaseModel):
    Arn_1: Optional[Arn] = Field(None, alias='Arn')
    CreateDate: Optional[Timestamp] = None
    Description: Optional[ResourceDescription] = None
    Id: Optional[ResourceId] = None
    Name: Optional[NamespaceName] = None
    Properties: Optional[NamespaceProperties] = None
    ServiceCount: Optional[ResourceCount] = None
    Type: Optional[NamespaceType] = None


class OperationFilter(BaseModel):
    Condition: Optional[FilterCondition] = None
    Name: OperationFilterName
    Values: FilterValues


class OperationFilters(RootModel[List[OperationFilter]]):
    root: List[OperationFilter]


class OperationTargetsMap(RootModel[Optional[Dict[str, ResourceId]]]):
    root: Optional[Dict[str, ResourceId]] = None


class PrivateDnsPropertiesMutable(BaseModel):
    SOA_1: SOA = Field(..., alias='SOA')


class PrivateDnsPropertiesMutableChange(BaseModel):
    SOA: SOAChange


class PublicDnsPropertiesMutable(BaseModel):
    SOA_1: SOA = Field(..., alias='SOA')


class PublicDnsPropertiesMutableChange(BaseModel):
    SOA: SOAChange


class RegisterInstanceRequest(BaseModel):
    Attributes_1: Attributes = Field(..., alias='Attributes')
    CreatorRequestId: Optional[ResourceId] = None
    InstanceId_1: InstanceId = Field(..., alias='InstanceId')
    ServiceId: ResourceId


class ServiceFilter(BaseModel):
    Condition: Optional[FilterCondition] = None
    Name: ServiceFilterName
    Values: FilterValues


class ServiceFilters(RootModel[List[ServiceFilter]]):
    root: List[ServiceFilter]


class Tag(BaseModel):
    Key: TagKey
    Value: TagValue


class TagList(RootModel[List[Tag]]):
    root: List[Tag] = Field(..., max_length=200, min_length=0)


class TagResourceRequest(BaseModel):
    ResourceARN: AmazonResourceName
    Tags: TagList


class UpdateHttpNamespaceRequest(BaseModel):
    Id: ResourceId
    Namespace: HttpNamespaceChange
    UpdaterRequestId: Optional[ResourceId] = None


class CreateHttpNamespaceRequest(BaseModel):
    CreatorRequestId: Optional[ResourceId] = None
    Description: Optional[ResourceDescription] = None
    Name: NamespaceNameHttp
    Tags: Optional[TagList] = None


class DiscoverInstancesResponse(BaseModel):
    Instances: Optional[HttpInstanceSummaryList] = None


class DnsConfig(BaseModel):
    DnsRecords: DnsRecordList
    NamespaceId: Optional[ResourceId] = None
    RoutingPolicy_1: Optional[RoutingPolicy] = Field(None, alias='RoutingPolicy')


class DnsConfigChange(BaseModel):
    DnsRecords: DnsRecordList


class GetInstanceResponse(BaseModel):
    Instance_1: Optional[Instance] = Field(None, alias='Instance')


class GetInstancesHealthStatusRequest(BaseModel):
    Instances: Optional[InstanceIdList] = None
    MaxResults_1: Optional[MaxResults] = Field(None, alias='MaxResults')
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')
    ServiceId: ResourceId


class ListNamespacesRequest(BaseModel):
    Filters: Optional[NamespaceFilters] = None
    MaxResults_1: Optional[MaxResults] = Field(None, alias='MaxResults')
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')


class ListOperationsRequest(BaseModel):
    Filters: Optional[OperationFilters] = None
    MaxResults_1: Optional[MaxResults] = Field(None, alias='MaxResults')
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')


class ListServicesRequest(BaseModel):
    Filters: Optional[ServiceFilters] = None
    MaxResults_1: Optional[MaxResults] = Field(None, alias='MaxResults')
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')


class ListTagsForResourceResponse(BaseModel):
    Tags: Optional[TagList] = None


class Namespace(BaseModel):
    Arn_1: Optional[Arn] = Field(None, alias='Arn')
    CreateDate: Optional[Timestamp] = None
    CreatorRequestId: Optional[ResourceId] = None
    Description: Optional[ResourceDescription] = None
    Id: Optional[ResourceId] = None
    Name: Optional[NamespaceName] = None
    Properties: Optional[NamespaceProperties] = None
    ServiceCount: Optional[ResourceCount] = None
    Type: Optional[NamespaceType] = None


class NamespaceSummariesList(RootModel[List[NamespaceSummary]]):
    root: List[NamespaceSummary]


class Operation(BaseModel):
    CreateDate: Optional[Timestamp] = None
    ErrorCode: Optional[Code] = None
    ErrorMessage: Optional[Message] = None
    Id: Optional[OperationId] = None
    Status: Optional[OperationStatus] = None
    Targets: Optional[OperationTargetsMap] = None
    Type: Optional[OperationType] = None
    UpdateDate: Optional[Timestamp] = None


class PrivateDnsNamespaceProperties(BaseModel):
    DnsProperties: PrivateDnsPropertiesMutable


class PrivateDnsNamespacePropertiesChange(BaseModel):
    DnsProperties: PrivateDnsPropertiesMutableChange


class PublicDnsNamespaceProperties(BaseModel):
    DnsProperties: PublicDnsPropertiesMutable


class PublicDnsNamespacePropertiesChange(BaseModel):
    DnsProperties: PublicDnsPropertiesMutableChange


class Service(BaseModel):
    Arn_1: Optional[Arn] = Field(None, alias='Arn')
    CreateDate: Optional[Timestamp] = None
    CreatorRequestId: Optional[ResourceId] = None
    Description: Optional[ResourceDescription] = None
    DnsConfig_1: Optional[DnsConfig] = Field(None, alias='DnsConfig')
    HealthCheckConfig_1: Optional[HealthCheckConfig] = Field(
        None, alias='HealthCheckConfig'
    )
    HealthCheckCustomConfig_1: Optional[HealthCheckCustomConfig] = Field(
        None, alias='HealthCheckCustomConfig'
    )
    Id: Optional[ResourceId] = None
    InstanceCount: Optional[ResourceCount] = None
    Name: Optional[ServiceName] = None
    NamespaceId: Optional[ResourceId] = None
    Type: Optional[ServiceType] = None


class ServiceChange(BaseModel):
    Description: Optional[ResourceDescription] = None
    DnsConfig: Optional[DnsConfigChange] = None
    HealthCheckConfig_1: Optional[HealthCheckConfig] = Field(
        None, alias='HealthCheckConfig'
    )


class ServiceSummary(BaseModel):
    Arn_1: Optional[Arn] = Field(None, alias='Arn')
    CreateDate: Optional[Timestamp] = None
    Description: Optional[ResourceDescription] = None
    DnsConfig_1: Optional[DnsConfig] = Field(None, alias='DnsConfig')
    HealthCheckConfig_1: Optional[HealthCheckConfig] = Field(
        None, alias='HealthCheckConfig'
    )
    HealthCheckCustomConfig_1: Optional[HealthCheckCustomConfig] = Field(
        None, alias='HealthCheckCustomConfig'
    )
    Id: Optional[ResourceId] = None
    InstanceCount: Optional[ResourceCount] = None
    Name: Optional[ServiceName] = None
    Type: Optional[ServiceType] = None


class UpdateServiceRequest(BaseModel):
    Id: ResourceId
    Service: ServiceChange


class CreatePrivateDnsNamespaceRequest(BaseModel):
    CreatorRequestId: Optional[ResourceId] = None
    Description: Optional[ResourceDescription] = None
    Name: NamespaceNamePrivate
    Properties: Optional[PrivateDnsNamespaceProperties] = None
    Tags: Optional[TagList] = None
    Vpc: ResourceId


class CreatePublicDnsNamespaceRequest(BaseModel):
    CreatorRequestId: Optional[ResourceId] = None
    Description: Optional[ResourceDescription] = None
    Name: NamespaceNamePublic
    Properties: Optional[PublicDnsNamespaceProperties] = None
    Tags: Optional[TagList] = None


class CreateServiceRequest(BaseModel):
    CreatorRequestId: Optional[ResourceId] = None
    Description: Optional[ResourceDescription] = None
    DnsConfig_1: Optional[DnsConfig] = Field(None, alias='DnsConfig')
    HealthCheckConfig_1: Optional[HealthCheckConfig] = Field(
        None, alias='HealthCheckConfig'
    )
    HealthCheckCustomConfig_1: Optional[HealthCheckCustomConfig] = Field(
        None, alias='HealthCheckCustomConfig'
    )
    Name: ServiceName
    NamespaceId: Optional[ResourceId] = None
    Tags: Optional[TagList] = None
    Type: Optional[ServiceTypeOption] = None


class CreateServiceResponse(BaseModel):
    Service_1: Optional[Service] = Field(None, alias='Service')


class GetNamespaceResponse(BaseModel):
    Namespace_1: Optional[Namespace] = Field(None, alias='Namespace')


class GetOperationResponse(BaseModel):
    Operation_1: Optional[Operation] = Field(None, alias='Operation')


class GetServiceResponse(BaseModel):
    Service_1: Optional[Service] = Field(None, alias='Service')


class ListNamespacesResponse(BaseModel):
    Namespaces: Optional[NamespaceSummariesList] = None
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')


class PrivateDnsNamespaceChange(BaseModel):
    Description: Optional[ResourceDescription] = None
    Properties: Optional[PrivateDnsNamespacePropertiesChange] = None


class PublicDnsNamespaceChange(BaseModel):
    Description: Optional[ResourceDescription] = None
    Properties: Optional[PublicDnsNamespacePropertiesChange] = None


class ServiceSummariesList(RootModel[List[ServiceSummary]]):
    root: List[ServiceSummary]


class UpdatePrivateDnsNamespaceRequest(BaseModel):
    Id: ResourceId
    Namespace: PrivateDnsNamespaceChange
    UpdaterRequestId: Optional[ResourceId] = None


class UpdatePublicDnsNamespaceRequest(BaseModel):
    Id: ResourceId
    Namespace: PublicDnsNamespaceChange
    UpdaterRequestId: Optional[ResourceId] = None


class ListServicesResponse(BaseModel):
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')
    Services: Optional[ServiceSummariesList] = None
